<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>
  <log4net>
    <!--定义输出到文件中-->
    <appender name="ErrorAppender" type="log4net.Appender.RollingFileAppender">
      <!--定义文件存放位置-->
      <param name="File" value="log\\error\\"/>
      <param name="appendToFile" value="true"/>
      <!--可以为:Once|Size|Date|Composite-->
      <!--Composite为Size和Date的组合-->
      <param name="RollingStyle" value="Date"/>
      <!--日志最大个数,都是最新的-->
      <!--rollingStyle节点为Date时,该节点不起作用-->
      <!--rollingStyle节点为Size时,只能有value个日志-->
      <!--rollingStyle节点为Composite时,每天有value个日志-->
      <maxSizeRollBackups value="10" />
      <param name="MaxSizeRollBackups" value="100"/>
      <!--可用的单位:KB|MB|GB-->
      <!--不要使用小数,否则会一直写入当前日志-->
      <param name="MaxFileSize" value="10240" />
      <param name="DatePattern" value="yyyyMM\\yyyyMMddHHmm'.log'"/>
      <!--置为true,当前最新日志文件名永远为file节中的名字-->
      <param name="StaticLogFileName" value="false"/>
      <layout type="log4net.Layout.PatternLayout">
      <!--
      %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息
      %n(new line):换行
      %d(datetime):输出当前语句运行的时刻
      %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数
      %t(thread id):当前语句所在的线程ID
      %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
      %c(class):当前日志对象的名称，例如：
      模式字符串为：%-10c -%m%n
      代码为：
      ILog log=LogManager.GetLogger(“Exam.Log”);
      log.Debug(“Hello”);
      则输出为下面的形式：
      Exam.Log       - Hello
      %L：输出语句所在的行号
      %F：输出语句所在的文件名
      %-数字：表示该项的最小长度，如果不够，则用空格填充
      例如，转换模式为%r [%t]%-5p %c - %m%n 的 PatternLayout 将生成类似于以下内容的输出：
      176 [main] INFO  org.foo.Bar - Located nearest gas station.-->
        <!--每条日志末尾的文字说明-->
        <!--输出格式-->
        <!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->
        <conversionPattern value="%n时间：%date %n线程：[%t] %n级别：%-5level %n出错类：%logger%n环境：%property%n详细：%message%n"/>
        <!--详细信息见：http://www.cnitblog.com/seeyeah/archive/2008/10/15/50291.html-->    
      </layout>
    </appender>
    <appender name="InfoAppender" type="log4net.Appender.RollingFileAppender">
      <!--定义文件存放位置-->
      <param name="File" value="log\\info\\"/>
      <param name="appendToFile" value="true"/>
      <!--可以为:Once|Size|Date|Composite-->
      <!--Composite为Size和Date的组合-->
      <param name="RollingStyle" value="Date"/>
      <!--日志最大个数,都是最新的-->
      <!--rollingStyle节点为Date时,该节点不起作用-->
      <!--rollingStyle节点为Size时,只能有value个日志-->
      <!--rollingStyle节点为Composite时,每天有value个日志-->
      <maxSizeRollBackups value="10" />
      <param name="MaxSizeRollBackups" value="100"/>
      <!--可用的单位:KB|MB|GB-->
      <!--不要使用小数,否则会一直写入当前日志-->
      <param name="MaxFileSize" value="10240" />
      <param name="DatePattern" value="yyyyMM\\yyyyMMddHHmm'.log'"/>
      <!--置为true,当前最新日志文件名永远为file节中的名字-->
      <param name="StaticLogFileName" value="false"/>
      <layout type="log4net.Layout.PatternLayout">
        <!--
      %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息
      %n(new line):换行
      %d(datetime):输出当前语句运行的时刻
      %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数
      %t(thread id):当前语句所在的线程ID
      %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
      %c(class):当前日志对象的名称，例如：
      模式字符串为：%-10c -%m%n
      代码为：
      ILog log=LogManager.GetLogger(“Exam.Log”);
      log.Debug(“Hello”);
      则输出为下面的形式：
      Exam.Log       - Hello
      %L：输出语句所在的行号
      %F：输出语句所在的文件名
      %-数字：表示该项的最小长度，如果不够，则用空格填充
      例如，转换模式为%r [%t]%-5p %c - %m%n 的 PatternLayout 将生成类似于以下内容的输出：
      176 [main] INFO  org.foo.Bar - Located nearest gas station.-->
        <!--每条日志末尾的文字说明-->
        <!--输出格式-->
        <!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->
        <conversionPattern value="%n时间：%date %n线程：[%t] %n级别：%-5level%n环境：%property%n详细：%message%n"/>
        <!--详细信息见：http://www.cnitblog.com/seeyeah/archive/2008/10/15/50291.html-->
      </layout>
    </appender>
    <appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
      <mapping>
        <level value="ERROR" />
        <foreColor value="White" />
        <backColor value="Red, HighIntensity" />
      </mapping>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
      </layout>
    </appender>
    <root>
      <!--control log level: ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF-->
      <!--如果没有定义LEVEL的值，则缺省为DEBUG-->
      <level value="ERROR"/>
      <!--文件形式记录日志-->
      <appender-ref ref="ErrorAppender"/>
    </root>
    <!--additivity="false" 不继承root配置-->
    <logger name="info" additivity="false">
      <!--输出级别在WARN和OFF之间的日志-->
      <!--<filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="WARN" />
        <param name="LevelMax" value="OFF" />
      </filter>-->
      <level value="INFO" />
      <appender-ref ref="InfoAppender" />
      <appender-ref ref="ColoredConsoleAppender" />
    </logger>
  </log4net>
</configuration>